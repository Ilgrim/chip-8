# Chipquarium
# Copyright 2016 Matthew Mikolay
# For licensing info, please see accompanying LICENSE file.
# See github.com/mattmikolay/chip-8 or mattmik.com for more info.

:alias stat_poop vB

:alias state_val1 v0
:alias state_val2 v5
:alias game_state v4 # Game state
:alias fish_level v6 # Fish level (0x00 = small, 0x01 = medium, 0x02 = large)
:alias fish_dir v7  # Direction of the fishy (0x00 = left, 0x01 = right)
:alias fish_x v8    # x coordinate of the fishy
:alias fish_y v9    # y coordinate of the fishy
:alias scratch_1 v1 # Scratch register 1
:alias scratch_2 v2 # Scratch register 2
:alias scratch_3 v3 # Scratch register 3
:alias hunger_stat va
:alias stamina_stat vc
:alias health_stat ve

:const STATE_SWIMMING   0x00
:const STATE_FEEDING    0x01
:const STATE_SLEEPING   0x02
:const STATE_PLAYING    0x03
:const STATE_DEAD       0x04

: main

    draw_ground

    stat_poop := 0b10001001
    draw_poop

    # Default to the swimming state
    game_state := STATE_SWIMMING

    # Set stat defaults
    health_stat := 0xFF
    hunger_stat := 0x00
    stamina_stat := 0xFF

    # At the start, the fish should point toward the right
    fish_dir := 0x01

    # Begin with a small fish!
    fish_level := 0x00

: event_loop

    # If fish health hits zero, the game is over
    if health_stat == 0x00 then
        end_game

    if game_state == STATE_SWIMMING begin

        # Choose a random x offset in [1,4] for the fish
        scratch_1 := random 0b00000011

        # If fish is facing right, increase x coordinate
        if fish_dir == 0x01 begin
            fish_x += scratch_1
            fish_x += 1

        # If fish is facing left, decrease x coordinate
        else
            fish_x -= scratch_1
            fish_x += -1
        end

        # Choose a random y coordinate in [6,21] for the fish
        fish_y := random 0x0F
        fish_y += 6

        # Draw the fish sprite at the newly calculated position
        draw_fish

    end

    if game_state == STATE_SLEEPING begin

        i := sleep_bubbles_2
        sprite state_val1 state_val2 6

        scratch_3 += -1

        # If done sleeping...
        if scratch_3 == 0x00 begin

            # Erase sleeping bubbles
            i := sleep_bubbles_1
            sprite state_val1 state_val2 6

            # Return to swimming state
            game_state := STATE_SWIMMING

        end

    end

    if game_state == STATE_FEEDING begin

        # If fish is at top of screen, erase food and return to swimming state
        if fish_y == 0x04 begin

            i := food
            sprite state_val1 state_val2 6

            game_state := STATE_SWIMMING

        else

            # Erase the fish sprite at its current location
            draw_fish

            fish_y += -1

            draw_fish

        end

    end

    scratch_1 := 0x30
    delay := scratch_1

    loop

        check_key
        scratch_1 := delay

        while scratch_1 != 0x00
    again

    if game_state == STATE_SWIMMING begin

        # Erase the fish sprite at its current location
        draw_fish

        update_direction

    end

    jump event_loop

#########################################################
# Checks if a key has been pressed and reacts accordingly
#########################################################
: check_key

    if game_state == STATE_SWIMMING begin

        # Clean tank if 'C' key is pressed
        scratch_2 := 0x0C
        if scratch_2 key begin

            # Erase current poop sprites and reset poop value
            draw_poop
            stat_poop := 0x00

        end

        # Sleep if 'D' key is pressed
        scratch_2 := 0x0D
        if scratch_2 key begin

            # state_val1 will temporarily store bubbles x
            state_val1 := fish_x
            state_val1 += 5

            # Adjust bubble x based upon fish width
            if fish_level == 0x01 then
                state_val1 += 3
            if fish_level == 0x02 then
                state_val1 += 9

            # state_val2 will temporarily store bubbles y
            state_val2 := fish_y
            state_val2 += -6

            # Draw sleep bubbles above the fish
            i := sleep_bubbles_1
            sprite state_val1 state_val2 6

            # Transition to sleeping state and reset stamina
            game_state := STATE_SLEEPING
            stamina_stat := 0xFF

            # Use scratch_3 to keep track of how long to stay sleeping
            scratch_3 := 0x0A

        end

        # Feed fish if 'F' key is pressed
        scratch_2 := 0x0F
        if scratch_2 key begin

            # Choose random x location in [16, 47] for fish food
            # state_val1 and state_val2 will temporarily store food x and y
            state_val1 := random 0b11111
            state_val1 += 16
            state_val2 := 0x00

            i := food
            sprite state_val1 state_val2 6

            # Transition to feeding state and reset hunger
            game_state := STATE_FEEDING
            hunger_stat := 0x00

        end

    end

    return

#########################################################################
# Updates the fish's direction, if the fish has hit one of the boundaries
#########################################################################
: update_direction

    # Check for fish at right edge of screen
    scratch_1 := fish_x
    scratch_1 += 16
    scratch_2 := 0b11000000
    scratch_1 &= scratch_2
    if scratch_1 != 0x00 then
        fish_dir := 0x00

    # Check for fish at left edge of screen
    scratch_1 := fish_x
    scratch_2 := 0b11111000
    scratch_1 &= scratch_2
    if scratch_1 == 0x00 then
        fish_dir := 0x01

    return

# Ends the game, preventing further user interaction. Rest in peace, fishy.
: end_game

    # If the fish has already gone to fishy heaven, there's nothing to do
    if game_state == STATE_DEAD then
        return

    game_state := STATE_DEAD

    # Draw an upside-down fish at the top of the tank
    fish_y := 0x00
    fish_dir := 0x01
    draw_flipped_fish

    return

###################################
# Draws the bottom of the fish tank
###################################
: draw_ground

    i := ground
    
    scratch_2 := 31
    scratch_1 := 0

    loop
        sprite scratch_1 scratch_2 1
        scratch_1 += 8
        if scratch_1 != 64 then
    again
    return

###########################################################
# Draws a row of fish droppings at the bottom of the screen
###########################################################
: draw_poop

    i := poop

    # x coordinate of poop sprite
    scratch_3 := 0

    # y coordinate of poop sprite
    scratch_2 := 29

    scratch_1 := stat_poop

    loop

        scratch_1 <<= scratch_1
        if vF != 0x00 then
            sprite scratch_3 scratch_2 2

        scratch_3 += 8

        if scratch_1 != 0x00 then
    again

    return

########################################################
# Draws the fish sprite on the screen at fish_x, fish_y.
# The fish's size will depend upon its level.
########################################################
: draw_fish

    if fish_level == 0x00 then
        draw_small_fish
    if fish_level == 0x01 then
        draw_medium_fish
    if fish_level == 0x02 then
        draw_large_fish

    return

###################################################################
# Draws an upside-down fish sprite on the screen at fish_x, fish_y.
# The fish's size will depend upon its level.
###################################################################
: draw_flipped_fish

    if fish_level == 0x00 then
        draw_small_fish
    if fish_level == 0x01 then
        draw_medium_flipped_fish
    if fish_level == 0x02 then
        draw_large_flipped_fish

    return

#######################################################
# Draws a small fish sprite on screen at fish_x, fish_y
#######################################################
: draw_small_fish

    i := small_fish_left
    if fish_dir == 0x01 then
        i := small_fish_right

    sprite fish_x fish_y 3
    return

########################################################
# Draws a medium fish sprite on screen at fish_x, fish_y
########################################################
: draw_medium_fish

    i := medium_fish_left
    if fish_dir == 0x01 then
        i := medium_fish_right

    sprite fish_x fish_y 4
    return

####################################################################
# Draws a medium upside-down fish sprite on screen at fish_x, fish_y
####################################################################
: draw_medium_flipped_fish
    i := medium_flipped_fish
    sprite fish_x fish_y 4
    return

#######################################################
# Draws a large fish sprite on screen at fish_x, fish_y
#######################################################
: draw_large_fish

    # Draw the left half of the large fish sprite
    i := large_fish_1_left
    if fish_dir == 0x01 then
        i := large_fish_1_right
    sprite fish_x fish_y 8

    fish_x += 8

    # Draw the right half of the large fish sprite
    i := large_fish_2_left
    if fish_dir == 0x01 then
        i := large_fish_2_right
    sprite fish_x fish_y 8

    fish_x += -8

    return

###################################################################
# Draws a large upside-down fish sprite on screen at fish_x, fish_y
###################################################################
: draw_large_flipped_fish

    # Draw the left half of the large fish sprite
    i := large_flipped_fish_1
    sprite fish_x fish_y 6

    fish_x += 8

    # Draw the right half of the large fish sprite
    i := large_flipped_fish_2
    sprite fish_x fish_y 6

    return

: ground
    0b11111111

: poop
    0b00011000
    0b00111100

: food
    0b10000000
    0b00010000
    0b01000000
    0b00001000
    0b10000000
    0b00100000

: sleep_bubbles_1
    0b10000000
    0b00000000
    0b10000000
    0b00000000
    0b10000000
    0b00000000

: sleep_bubbles_2
    0b10000000
    0b10000000
    0b10000000
    0b10000000
    0b10000000
    0b10000000

: small_fish_left
    0b01101000
    0b11110000
    0b01101000

: small_fish_right
    0b10110000
    0b01111000
    0b10110000

: medium_fish_left
    0b01111011
    0b10111110
    0b11111110
    0b01111011   

: medium_fish_right
    0b11011110
    0b01111101
    0b01111111
    0b11011110

: medium_flipped_fish
    0b11011110
    0b01111111
    0b01111111
    0b11011110

: large_fish_1_left
    0b01110000
    0b10001000
    0b10011111
    0b00111111
    0b00101111
    0b00111111
    0b00000011
    0b00011111

: large_fish_2_left
    0b00000000
    0b00000000
    0b10000000
    0b11011000
    0b11110000
    0b11100000
    0b11010000
    0b10011000

: large_fish_1_right
    0b00000000
    0b00000000
    0b00001111
    0b11011111
    0b01111111
    0b00111111
    0b01011110
    0b11001111

: large_fish_2_right
    0b01110000
    0b10001000
    0b11001000
    0b11100000
    0b10100000
    0b11100000
    0b00000000
    0b11000000

: large_flipped_fish_1
    0b11001111
    0b01011110
    0b00111111
    0b01111111
    0b11011111
    0b00001111

: large_flipped_fish_2
    0b11000000
    0b00000000
    0b11100000
    0b11100000
    0b11100000
    0b11000000

: hunger_text_1
    0b10101010
    0b10101010
    0b11101010
    0b10101010
    0b10101110

: hunger_text_2
    0b11001110
    0b10101000
    0b10101010
    0b10101010
    0b10101110

: hunger_text_3
    0b11101100
    0b10001010
    0b11001100
    0b10001010
    0b11101010

: happy_text_1
    0b10100100
    0b10101010
    0b11101110
    0b10101010
    0b10101110

: happy_text_2
    0b11101110
    0b10101010 
    0b11101110 
    0b10001000 
    0b10001000

: happy_text_3
    0b10100000
    0b10100000
    0b11100000
    0b01000000
    0b01000000

: stamina_text_1
    0b11101110
    0b10000100
    0b11100100
    0b00100100
    0b11100100

: stamina_text_2
    0b11101111
    0b10101010
    0b11101010
    0b10101010
    0b10101010

: stamina_text_3
    0b10111011
    0b10010010
    0b10010010
    0b10010010
    0b10111010

: stamina_text_4
    0b00111000
    0b10101000
    0b10111000
    0b10101000
    0b10101000
